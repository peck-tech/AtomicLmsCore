{
  "info": {
    "name": "AtomicLMS - Users API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Tenant Context",
      "description": "Tests for multi-tenant user management",
      "item": [
        {
          "name": "Create User in Tenant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "X-Test-Tenant",
                "value": "{{tenantId}}"
              },
              {
                "key": "X-Tenant-Id",
                "value": "{{tenantId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v0.1/learners/users"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \u0022ExternalUserId\u0022: \u0022ext-user-{{$randomInt}}\u0022,\n  \u0022Email\u0022: \u0022user{{$randomInt}}@test.com\u0022,\n  \u0022FirstName\u0022: \u0022Test\u0022,\n  \u0022LastName\u0022: \u0022User\u0022,\n  \u0022DisplayName\u0022: \u0022Test User\u0022,\n  \u0022IsActive\u0022: true,\n  \u0022Metadata\u0022: {\n    \u0022role\u0022: \u0022student\u0022\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\u0027Status code is 201 Created\u0027, function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\u0027Returns user ID\u0027, function() {",
                  "    var userId = pm.response.json();",
                  "    pm.expect(userId).to.be.a(\u0027string\u0027);",
                  "    pm.environment.set(\u0027createdUserId\u0027, userId);",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set tenant context\npm.environment.set(\u0027tenantId\u0027, pm.variables.replaceIn(\u0027{{$guid}}\u0027));"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Users in Tenant",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "X-Test-Tenant",
                "value": "{{tenantId}}"
              },
              {
                "key": "X-Tenant-Id",
                "value": "{{tenantId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v0.1/learners/users"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\u0027Status code is 200\u0027, function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\u0027Returns array of users\u0027, function() {",
                  "    var users = pm.response.json();",
                  "    pm.expect(users).to.be.an(\u0027array\u0027);",
                  "});",
                  "",
                  "pm.test(\u0027Users have correct structure\u0027, function() {",
                  "    var users = pm.response.json();",
                  "    if (users.length \u003E 0) {",
                  "        var user = users[0];",
                  "        pm.expect(user).to.have.property(\u0027id\u0027);",
                  "        pm.expect(user).to.have.property(\u0027email\u0027);",
                  "        pm.expect(user).to.have.property(\u0027firstName\u0027);",
                  "        pm.expect(user).to.have.property(\u0027lastName\u0027);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "tenantId",
      "value": "{{$guid}}",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "{{$guid}}",
      "type": "string"
    },
    {
      "key": "learningObjectId",
      "value": "{{$guid}}",
      "type": "string"
    },
    {
      "key": "correlationId",
      "value": "",
      "type": "string"
    }
  ]
}